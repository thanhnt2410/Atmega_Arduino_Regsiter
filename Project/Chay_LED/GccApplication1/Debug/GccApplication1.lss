
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000136  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000136  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000168  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000656  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005be  00000000  00000000  0000081a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000261  00000000  00000000  00000dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  0000103c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000035a  00000000  00000000  00001060  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000006c  00000000  00000000  000013ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001426  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 6f 00 	jmp	0xde	; 0xde <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:



int main(void)
{
	DDRA = 0xff;		//Khai báo thanh ghi PortA la output
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0xff;		//Khai báo PA0 t?i PA7 xuat ra 5v
  70:	8b bb       	out	0x1b, r24	; 27
	DDRB = 0x00;		//Chan B0 input
  72:	17 ba       	out	0x17, r1	; 23
	PORTB = 0x01;		//Chan B0 keo cao
  74:	81 e0       	ldi	r24, 0x01	; 1
  76:	88 bb       	out	0x18, r24	; 24
		//}
		//else
		//{
			//PORTA = 0x00;	//output 0v chan A0
		//}
		PORTA = 0b11100111;		//?? bit 34 ? 0 thì ?èn s? sáng
  78:	87 ee       	ldi	r24, 0xE7	; 231
  7a:	8b bb       	out	0x1b, r24	; 27
		for(int i =3; i>=0; i--)	//?? led ch?y sang hai bên
  7c:	83 e0       	ldi	r24, 0x03	; 3
  7e:	90 e0       	ldi	r25, 0x00	; 0
  80:	99 23       	and	r25, r25
  82:	d4 f3       	brlt	.-12     	; 0x78 <main+0xc>
		{
			PORTA &=~ (1<<(i));
  84:	6b b3       	in	r22, 0x1b	; 27
  86:	21 e0       	ldi	r18, 0x01	; 1
  88:	30 e0       	ldi	r19, 0x00	; 0
  8a:	a9 01       	movw	r20, r18
  8c:	08 2e       	mov	r0, r24
  8e:	02 c0       	rjmp	.+4      	; 0x94 <main+0x28>
  90:	44 0f       	add	r20, r20
  92:	55 1f       	adc	r21, r21
  94:	0a 94       	dec	r0
  96:	e2 f7       	brpl	.-8      	; 0x90 <main+0x24>
  98:	54 2f       	mov	r21, r20
  9a:	50 95       	com	r21
  9c:	56 23       	and	r21, r22
  9e:	5b bb       	out	0x1b, r21	; 27
			PORTA &=~ (1<<(7-i));
  a0:	5b b3       	in	r21, 0x1b	; 27
  a2:	67 e0       	ldi	r22, 0x07	; 7
  a4:	70 e0       	ldi	r23, 0x00	; 0
  a6:	68 1b       	sub	r22, r24
  a8:	79 0b       	sbc	r23, r25
  aa:	02 c0       	rjmp	.+4      	; 0xb0 <main+0x44>
  ac:	22 0f       	add	r18, r18
  ae:	33 1f       	adc	r19, r19
  b0:	6a 95       	dec	r22
  b2:	e2 f7       	brpl	.-8      	; 0xac <main+0x40>
  b4:	32 2f       	mov	r19, r18
  b6:	30 95       	com	r19
  b8:	35 23       	and	r19, r21
  ba:	3b bb       	out	0x1b, r19	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  bc:	6f ef       	ldi	r22, 0xFF	; 255
  be:	73 ec       	ldi	r23, 0xC3	; 195
  c0:	e9 e0       	ldi	r30, 0x09	; 9
  c2:	61 50       	subi	r22, 0x01	; 1
  c4:	70 40       	sbci	r23, 0x00	; 0
  c6:	e0 40       	sbci	r30, 0x00	; 0
  c8:	e1 f7       	brne	.-8      	; 0xc2 <main+0x56>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <main+0x60>
  cc:	00 00       	nop
			_delay_ms(200);
			PORTA |= (1<<(i));
  ce:	3b b3       	in	r19, 0x1b	; 27
  d0:	43 2b       	or	r20, r19
  d2:	4b bb       	out	0x1b, r20	; 27
			PORTA |=(1<<(7-i));
  d4:	3b b3       	in	r19, 0x1b	; 27
  d6:	23 2b       	or	r18, r19
  d8:	2b bb       	out	0x1b, r18	; 27
		//else
		//{
			//PORTA = 0x00;	//output 0v chan A0
		//}
		PORTA = 0b11100111;		//?? bit 34 ? 0 thì ?èn s? sáng
		for(int i =3; i>=0; i--)	//?? led ch?y sang hai bên
  da:	01 97       	sbiw	r24, 0x01	; 1
  dc:	d1 cf       	rjmp	.-94     	; 0x80 <main+0x14>

000000de <_exit>:
  de:	f8 94       	cli

000000e0 <__stop_program>:
  e0:	ff cf       	rjmp	.-2      	; 0xe0 <__stop_program>
